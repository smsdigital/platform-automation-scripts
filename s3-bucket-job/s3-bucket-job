import hudson.model.*

env.stageName = 'production'
env.projectName = 'sms'
env.stepsMapName = 'stepsMap'
//env.gitCommitAuthor = 'Sascha Lewandowski'

m1 = System.currentTimeMillis()

properties(
        [
            buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '500')),
            parameters(
                    [
                            string(defaultValue: '1.0', description: 'The Main versionNumber of the rolling out service (x.y | 1.2)', name: 'masterVersion', trim: false),
                            string(defaultValue: 's3-object', description: 'The serviceName of the rolling out service', name: 'serviceName', trim: false),
                            choice(choices: ['eu-central-1', 'eu-west-1', 'us-east-1', 'us-central-1'], description: 'The targetRegion of the rolling out service', name: 'targetRegion'),
                            choice(choices: ['smsdigital-datahost-apsouth1', 'smsdigital-datahost-eucentral1', 'smsdigital-datahost-euwest1', 'smsdigital-datahost-saeast1', 'smsdigital-datahost-useast1', 'smsdigital-datahost-useast2', 'smsdigital-datahost-uswest1'], description: 'Choose the bucket', name: 'bucket'),
                            string(defaultValue: '', description: 'Enter the customer name', name: 'customer_name', trim: false),
                            string(defaultValue: '', description: 'Enter the date of the object creation', name: 'date', trim: false),
                            string(defaultValue: '', description: 'Enter the name of the contact person to add in the description field of the policy', name: 'ContactPerson', trim: false),
                            string(defaultValue: '', description: 'Enter the email address of the contact person', name: 'email', trim: false),
                            string(defaultValue: '', description: 'Enter the cost center details', name: 'CostCenter', trim: false)
                    ]
            ),
            disableConcurrentBuilds()
            // pipelineTriggers(
            //         [
            //                 cron('0 0 * * 1-3'), githubPush()
            //         ]
            //)
        ]
)

node {

    deleteDir()

    try {
        sh "[ -d pipeline ] || mkdir pipeline"
        dir('pipeline') {
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'sysadminsms_github_account', name: 'origin', refspec: '+refs/heads/master:refs/remotes/origin/master',,url: 'https://github.com/smsdigital/platform-jenkins_automation.git']]])
        }

        def func = load('pipeline/functions/function.groovy')

        wrap([$class: 'BuildUser']) {
            env.gitCommitAuthor = env.BUILD_USER
        }

        func.printEnvironment()

        // Prepare versionNumber
            env.versionNumber = masterVersion + "." + env.BUILD_NUMBER

        // Pipeline Steps - while
           	// int stepsCount = Integer.parseInt(stepsCount)
            // while (count <= stepsCount) {
            //     try {
            //         name = "${count}_name"
            //         env.step_name = mapping[name]
            //         echo "step_name: "+step_name
            //         stage("${step_name}") {
            //             def steps = load('pipeline/functions/steps.groovy');
            //             steps.stepToLoad(count)

            //         }
            //         count++;
            //     }
            //     catch (err) {
            //        println err
            //        throw err
            //     }
            // }

        stage('Get Pipeline') {}
        stage('Unit Tests') {}
        stage('Prepare AWS') {
                // prepare env for switch role
                def awsAccountName = func.getAwsAccountName(stageName,projectName)
                func.switchAwsAccount(awsAccountName)
                func.printEnvironment()

        }
        stage('Deploy AWS') {
            sh """#!/bin/bash
        export AWS_DEFAULT_REGION=${targetRegion}
        export AWS_ACCESS_KEY_ID=${awsAccessKeyId}
        export AWS_SECRET_ACCESS_KEY=${awsSecretAccessKey}
        export AWS_SECURITY_TOKEN=${awsSecurityToken}
		bash -e << \"TRY\"
		    
aws s3api put-object --bucket ${bucket} --key ${customer_name}-${date}/
aws iam create-user --user-name ${customer_name}-${date}
aws iam create-access-key --user-name ${customer_name}-${date}
cat > "${customer_name}-${date}".json << EOF
{
"Version":"2012-10-17",
"Statement": [
{
    "Sid": "AllowUserToSeeBucketListInTheConsole",
    "Action": ["s3:ListAllMyBuckets", "s3:GetBucketLocation"],
    "Effect": "Allow",
    "Resource": ["arn:aws:s3:::*"]
},
{
    "Sid": "AllowRootAndHomeListingOfCompanyBucket",
    "Action": ["s3:ListBucket"],
    "Effect": "Allow",
    "Resource": ["arn:aws:s3:::${bucket}"],
    "Condition":{"StringEquals":{"s3:prefix":["", "${customer_name}-${date}"],"s3:delimiter":["/"]}}
},
{
    "Sid": "AllowListingOfUserFolder",
    "Action": ["s3:ListBucket"],
    "Effect": "Allow",
    "Resource": ["arn:aws:s3:::${bucket}"],
    "Condition":{"StringLike":{"s3:prefix":["${customer_name}-${date}/*"]}}
},
{
    "Sid": "AllowAllS3ActionsInUserFolder",
    "Effect": "Allow",
    "Action": ["s3:*"],
    "Resource": ["arn:aws:s3:::${bucket}/${customer_name}-${date}/*"]
}
]
}
EOF
aws iam create-policy --policy-name ${customer_name}-${date} --policy-document file://"${customer_name}-${date}".json --description "${ContactPerson} ${email} ${CostCenter}"
aws iam attach-user-policy --policy-arn arn:aws:iam::628182390609:policy/${customer_name}-${date} --user-name ${customer_name}-${date}
TRY
		exit \$?
	"""
        }
        stage('Frontend Testing') {}

        m2 = System.currentTimeMillis()

        println "M1: " + m1
        println "M2: " + m2

        def durTime = func.durationTime(m1, m2)

        stage('Notify via Slack') {

            def slackChannel = 'slack_message_testing'
        		func.notifySlack("", slackChannel, [
        				[
        					title: "SUCCEEDED ${serviceName}, Version ${versionNumber}",
        					title_link: "${env.BUILD_URL}",
        					color: "good",
        					text: "Created by: ${gitCommitAuthor}",
        					"mrkdwn_in": ["fields"],
        					fields: [
        						[
        							title: "Duration Time",
        							value: "${durTime}",
        							short: true
        						],
        						[
        							title: "Stage Name",
        							value: "${stageName}",
        							short: true
        						],
                                [
                                    title: "Region",
                                    value: "The new application is rolling out at ${targetRegion} region of AWS.",
                                    short: false
                                ]
        					]
        				]
        		])

        }
        // stage('Trigger next Stage') {
        //     build job: 'Staging Pipeline', parameters: [string(name: 'versionNumber', value: versionNumber), string(name: 'serviceName', value: serviceName), string(name: 'targetRegion', value: targetRegion)], propagate: false, quietPeriod: 10, wait: false
        // }

        currentBuild.result = 'SUCCESS'

    } catch(err) {

        throw err as java.lang.Throwable

        def func = load('pipeline/functions/function.groovy')

        step_job = mapping['end_err_job']
        sload = "pipeline/"+productName+"/"+step_job+".groovy"
        def end = load(sload);
        end.endNegative()

        currentBuild.result = 'FAILED'

    } finally {

        println "final"

    }

}
